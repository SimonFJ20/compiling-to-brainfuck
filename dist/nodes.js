"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntNode = exports.HexNode = exports.UnaryNode = exports.SubtractionNode = exports.AdditionNode = exports.BinaryOperationNode = exports.CallNode = exports.AccessNode = exports.ReturnNode = exports.AssigmentNode = exports.DeclarationNode = exports.IfNode = exports.IfElseNode = exports.WhileNode = exports.BlockNode = exports.DefinitionNode = exports.ImportNode = exports.NamespaceNode = exports.FileNode = exports.ValueNode = exports.Node = exports.Pos = void 0;
class Pos {
    constructor(line, column, length) {
        this.line = line;
        this.column = column;
        this.length = length;
    }
    static from(token) {
        return new Pos(token.line, token.col, token.text.length);
    }
}
exports.Pos = Pos;
class Node {
    constructor(type, begin, end) {
        this.type = type;
        this.begin = begin;
        this.end = end;
    }
}
exports.Node = Node;
class ValueNode extends Node {
    constructor(valueType, token, pos) {
        super('value', pos, pos);
        this.valueType = valueType;
        this.value = token.value;
    }
}
exports.ValueNode = ValueNode;
class FileNode extends Node {
    constructor(namespace, statements, begin, end) {
        super('file', begin, end);
        this.namespace = namespace;
        this.statements = statements;
    }
}
exports.FileNode = FileNode;
class NamespaceNode extends Node {
    constructor(name, begin, end) {
        super('namespace', begin, end);
        this.name = name;
    }
}
exports.NamespaceNode = NamespaceNode;
class ImportNode extends Node {
    constructor(name, begin, end) {
        super('import', begin, end);
        this.name = name;
    }
}
exports.ImportNode = ImportNode;
class DefinitionNode extends Node {
    constructor(name, args, body, begin, end) {
        super('definition', begin, end);
        this.name = name;
        this.args = args;
        this.body = body;
    }
}
exports.DefinitionNode = DefinitionNode;
class BlockNode extends Node {
    constructor(nodes, begin, end) {
        super('block', begin, end);
        this.nodes = nodes;
    }
}
exports.BlockNode = BlockNode;
class WhileNode extends Node {
    constructor(condition, body, begin, end) {
        super('while', begin, end);
        this.condition = condition;
        this.body = body;
    }
}
exports.WhileNode = WhileNode;
class IfElseNode extends Node {
    constructor(condition, truthy, falsy, begin, end) {
        super('if_else', begin, end);
        this.condition = condition;
        this.truthy = truthy;
        this.falsy = falsy;
    }
    static from(ifNode, falsy, end) {
        return new IfElseNode(ifNode.condition, ifNode.truthy, falsy, ifNode.begin, end);
    }
}
exports.IfElseNode = IfElseNode;
class IfNode extends Node {
    constructor(condition, truthy, begin, end) {
        super('if', begin, end);
        this.condition = condition;
        this.truthy = truthy;
    }
}
exports.IfNode = IfNode;
class DeclarationNode extends Node {
    constructor(name, value, begin, end) {
        super('declaration', begin, end);
        this.name = name;
        this.value = value;
    }
}
exports.DeclarationNode = DeclarationNode;
class AssigmentNode extends Node {
    constructor(name, value, begin, end) {
        super('assignment', begin, end);
        this.name = name;
        this.value = value;
    }
}
exports.AssigmentNode = AssigmentNode;
class ReturnNode extends Node {
    constructor(value, begin, end) {
        super('return', begin, end);
        this.value = value;
    }
}
exports.ReturnNode = ReturnNode;
class AccessNode extends Node {
    constructor(name, begin, end) {
        super('access', begin, end);
        this.name = name;
    }
}
exports.AccessNode = AccessNode;
class CallNode extends Node {
    constructor(name, args, begin, end) {
        super('call', begin, end);
        this.name = name;
        this.args = args;
    }
}
exports.CallNode = CallNode;
class BinaryOperationNode extends Node {
    constructor(type, left, right, begin, end) {
        super(type, begin, end);
        this.left = left;
        this.right = right;
    }
}
exports.BinaryOperationNode = BinaryOperationNode;
class AdditionNode extends BinaryOperationNode {
    constructor(left, right, begin, end) {
        super('add', left, right, begin, end);
    }
}
exports.AdditionNode = AdditionNode;
class SubtractionNode extends BinaryOperationNode {
    constructor(left, right, begin, end) {
        super('sub', left, right, begin, end);
    }
}
exports.SubtractionNode = SubtractionNode;
class UnaryNode extends Node {
    constructor(value, begin, end) {
        super('unary', begin, end);
        this.value = value;
    }
}
exports.UnaryNode = UnaryNode;
class HexNode extends ValueNode {
    constructor(token, pos) {
        super('hex', token, pos);
    }
}
exports.HexNode = HexNode;
class IntNode extends ValueNode {
    constructor(token, pos) {
        super('int', token, pos);
    }
}
exports.IntNode = IntNode;
//# sourceMappingURL=data:application/json;base64,